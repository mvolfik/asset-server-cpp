# This is an example config file. All commented values are optional, and their
# default values are provided.

# Time allowed for the server to process all transformations on an uploaded
# image. This is measured from the moment the whole request is received by the
# server, until the moment the server saves all processed variants to disk.
# If the timer finishes earlier than the processing, the server will respond
# with error.processing_timed_out
#processing_timeout_secs=8

# Maximum time that a network socket can be open. This is measured from the
# moment a new connection is opened, until the moment the server writes the
# whole response to the socket. If the timer finishes earlier than the
# response is written, the socket will be killed, and the client will error
# out with something like "empty reply from server"
#socket_kill_timeout_secs=10

# Number of worker threads for resizing and converting images.
# Default value: std::thread::hardware_concurrency() + 1
#  (i.e. number of concurrent threads supported by the CPU)
#thread_pool_size={special default value}

# Maximum size of uploaded image.
# Must be an integer + suffix B, k/K, M or G (meaning bytes/KiB/MiB/GiB)
#upload_limit=20M

# Sizes (width) of images to generate. This is a comma-separated list of values
# of the following format:
#
# - [0-9]+ -> fixed size that will always be generated
#
# - [0-9]+:[0-9]+% (limit and a percentual decrement) -> Sequence of values,
#   where the first is the original image size, and each next value is the
#   previous decremented by ceil(prev_size * decrement / 100), as long as the
#   result is at least as large as the limit.
#   For example, for spec 543:21% and an image of width 1105px, the server
#   would generate widths of 543px, 688px, 872px, 1105px. For images of size
#   542px and below, this config wouldn't produce any extra sizes.
#   The decrement must be
#
# - [0-9]+:[0-9]+px (limit and a constant decrement) -> Same as above, except
#   the size decrement is the specified constant number of pixels in every
#   step.
# 
# All values must be integers > 0, the percentual decrement must additionally
# be less than 100.
#
# Additionally, a variant in the original dimensions is always kept.
sizes=100,256:25% # this example config always generates 100px variant +
                  # sequence with 25% decrements until 256px

# Formats to convert images to. Each value is a comma-separated list of target
# file extensions (= formats). The keys are the ImageMagick format identifiers
# (see first column on https://imagemagick.org/script/formats.php#supported),
# use lowercase. The optional special '*' key is list of formats that all
# uploaded images will be converted to.
# The example config below converts all files to webp, and specifies some
# extra formats for common source image formats. E.g. JPEG XL files will be
# converted to WEBP, JPEG and JPEG XL.
formats.*=webp
formats.avif=jpg
formats.gif=gif,png # note that animated images are not supported
                    # (dev note: it requires a lot of extra work in Magick++)
formats.heif=jpg
formats.jpeg=jpg
formats.jxl=jxl,jpg
formats.png=png
formats.tiff=jpg

# Optional auth token. If set, the server will check the requests for header
# Authorization: Bearer <token>
#auth_token=change_me,_this_is_not_secret

# IP adress and port to bind to. If not specified, the values below are the
# default.
#listen_host=127.0.0.1
#listen_port=8000

# Directory where the processed data will be stored. The server will assume no
# other process will modify the contents of this directory. However, other processes
# can freely read the files, assuming the temp_dir (see below) is on the same
# filesystem and this filesystem supports atomic renames.
data_dir=data

# Directory where the server will store temporary files. This directory must be
# on the same filesystem as the data_dir.
temp_dir=.asset-server-temp-data
